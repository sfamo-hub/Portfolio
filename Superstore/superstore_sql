--TABLE VIEW TO SEE STRUCTURE
SELECT *
FROM TRADING.ORDERS
LIMIT 100;


--PROBLEM 1 - HIGH DISCOUNTS

--DISCOUNT BUCKET (DB) MARGIN
--FINDING THE PERFORMANCE AND PROFITABILITY OF EACH DISCOUNT BUCKET
SELECT DISCOUNT,
    COUNT(DISTINCT ORDER_ID) AS ORDERS,
       SUM(SALES) AS SALES_DB, SUM(QUANTITY) AS UNITS_DB, SUM(COGS) AS COGS_DB, SUM(PROFIT) AS PROFIT_DB,
       ROUND(DIV0(PROFIT_DB,SALES_DB)*100,2) AS MARGIN_RATE_PERC
FROM TRADING.ORDERS O
GROUP BY 1
ORDER BY 1
;

--SEGMENTING CUSTOMERS BY MAX DISCOUNT BUCKET THAT THEY'VE SHOPPED IN TO
--THEN GROUPING AT A DISCOUNT BUCKET LEVEL TO GET PROFITABILITY OF CUSTOMERS AT THESE DISCOUNT LEVELS
WITH CUSTOMER_DISCOUNT AS (
       SELECT CUSTOMER_ID,
       MAX(CASE WHEN DISCOUNT = 0.32 THEN 0.3
           ELSE DISCOUNT END) AS MAX_DISCOUNT,
       COUNT(DISTINCT ORDER_ID) AS ORDERS,
       SUM(SALES) AS SALES_DB, SUM(QUANTITY) AS UNITS_DB, SUM(COGS) AS COGS_DB, SUM(PROFIT) AS PROFIT_DB,
       ROUND(DIV0(PROFIT_DB,SALES_DB)*100,2) AS MARGIN_RATE_PERC
FROM TRADING.ORDERS
GROUP BY 1)

SELECT MAX_DISCOUNT, SUM(ORDERS) AS ORDERS, SUM(SALES_DB) AS SALES, SUM(UNITS_DB) AS UNITS, SUM(PROFIT_DB) AS PROFIT
FROM CUSTOMER_DISCOUNT
GROUP BY 1
ORDER BY 1 DESC
;


--PROBLEM 2 - UNPROFITABLE SUB-CATEGORIES

--GROUPING CUSTOMERS BASED ON WHETHER THEY HAVE SHOPPED IN TO AN UNPROFITABLE SUB-CATEGORY
--THEN COMPARING THEIR PERFORMANCE AGAINST CUSTOMERS WHO HAVE NEVER SHOPPED IN TO THESE SUB-CATEGORIES
WITH UNPROFITABLE_CAT AS (
    SELECT CUSTOMER_ID,
           SUM(CASE WHEN UPPER("SUB-CATEGORY") IN ('BOOKCASES','TABLES','SUPPLIES') THEN 1
               ELSE 0 END) AS UNPROF_CAT_SHOPPER,
           SUM(SALES) AS SALES_UNPROF, SUM(QUANTITY) AS UNITS_UNPROF, SUM(COGS) AS COGS_UNPROF, SUM(PROFIT) AS PROFIT_UNPROF
    FROM TRADING.ORDERS
    --WHERE UPPER("SUB-CATEGORY") IN ('BOOKCASES','TABLES','SUPPLIES')
    GROUP BY 1
    ORDER BY 1
),

FULL_SALES AS (SELECT *
               FROM TRADING.ORDERS)

SELECT CASE WHEN UNPROFITABLE_CAT.UNPROF_CAT_SHOPPER >= 1 THEN 'UNPROF_SHOPPER'
            ELSE 'NON_SHOPPER' END AS CATEGORY_SHOPPER,
       UNPROFITABLE_CAT.UNPROF_CAT_SHOPPER,
       COUNT(DISTINCT UNPROFITABLE_CAT.CUSTOMER_ID) AS CUSTOMERS_UNPROF_CAT,
       COUNT(DISTINCT FULL_SALES.ORDER_ID) AS ORDERS, SUM(SALES) AS SALES, SUM(QUANTITY) AS UNITS, SUM(PROFIT) AS PROFIT
FROM UNPROFITABLE_CAT
JOIN FULL_SALES ON FULL_SALES.CUSTOMER_ID = UNPROFITABLE_CAT.CUSTOMER_ID
--WHERE UNPROFITABLE_CAT.UNPROF_CAT_SHOPPER > 0
GROUP BY 1, 2
ORDER BY 1, 2
;
